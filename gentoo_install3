#!/bin/bash

echo "Re-entering the chroot environment..."

source /etc/profile 
export PS1="(chroot) ${PS1}"
cd

read -p "Removing uneeded lines from /etc/fstab (press enter to continue)"
# Path to the input file
INPUT_FILE="/etc/fstab"

# Check if the file exists
if [[ ! -f "$INPUT_FILE" ]]; then
    echo "File not found!"
    exit 1
fi

# Step 1: Remove lines that start with 'efivarfs', 'none', or 'tracefs'
# We use grep with the -v option to exclude lines matching the pattern
grep -v -E '^(efivarfs|none|tracefs)' "$INPUT_FILE" > temp_file && mv temp_file "$INPUT_FILE"

echo "Lines starting with 'efivarfs', 'none', or 'tracefs' have been removed from $INPUT_FILE."

echo "Editing hostname."


# Path to the /etc/conf.d/hostname file
HOSTNAME_FILE="/etc/conf.d/hostname"

# Check if the file exists
if [[ ! -f "$HOSTNAME_FILE" ]]; then
    echo "Error: $HOSTNAME_FILE not found!"
    exit 1
fi

# Step 1: Read the current hostname from the file
current_hostname=$(grep -Eo 'hostname="([^"]+)"' "$HOSTNAME_FILE" | sed 's/hostname="//' | sed 's/"//')

# Check if we found a hostname
if [[ -z "$current_hostname" ]]; then
    echo "Error: Could not find the hostname in $HOSTNAME_FILE!"
    exit 1
fi

# Step 2: Prompt the user to change the hostname
echo "Current hostname: $current_hostname"
read -p "Enter a new hostname (or press Enter to keep the current one): " new_hostname

# Use the current hostname if the user didn't provide a new one
new_hostname=${new_hostname:-$current_hostname}

# Step 3: Update the /etc/conf.d/hostname file with the new hostname
sed -i "s/hostname=\"$current_hostname\"/hostname=\"$new_hostname\"/" "$HOSTNAME_FILE"

# Step 4: Confirm the change
echo "Hostname has been updated to: $new_hostname"


HOSTS_FILE="/etc/hosts"

if [[ ! -f "$HOSTS_FILE" ]]; then
    echo "Error: $HOSTS_FILE not found!"
    exit 1
fi

# Check if the line "127.0.0.1" exists in the /etc/hosts file
if ! grep -q "^127.0.0.1" "$HOSTS_FILE"; then
    echo "Error: Line starting with '127.0.0.1' not found in $HOSTS_FILE."
    exit 1
fi

# Using sed to add the new line before any line starting with '127.0.0.1' with a tab in between
sed -i "/^127.0.0.1/i 127.0.0.1\t$new_hostname" "$HOSTS_FILE"

# Confirm the change
echo "Added '127.0.0.1\t$new_hostname' to $HOSTS_FILE above the line starting with '127.0.0.1'."

echo "set your system password"
passwd

read -p "skipping init and boot configuration. go to https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/System#System_information to learn what we just skipped (press enter to continue)"

echo "downloading packages...."
emerge dhcpcd sudo screenfetch grub efibootmgr 

echo "configuring bootloader"

grub -install /dev/sda
grub -mkconfig -o /boot/grub/grub.cfg

echo "creating users and superusers"

# Path to the sudoers file
SUDOERS_FILE="/etc/sudoers"

# Check if the user is running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root (use sudo)."
    exit 1
fi

# Ensure the sudoers file exists
if [[ ! -f "$SUDOERS_FILE" ]]; then
    echo "Error: $SUDOERS_FILE not found!"
    exit 1
fi

# Step 1: Use sed to uncomment the line '%wheel ALL=(ALL) ALL'
# This will replace the line by uncommenting it (removes the '#' symbol)
sed -i 's/^#%wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/' "$SUDOERS_FILE"

# Step 2: Safely check the sudoers file syntax using visudo
visudo -c

# Step 3: Inform the user
if [[ $? -eq 0 ]]; then
    echo "Successfully uncommented '%wheel ALL=(ALL) ALL' in $SUDOERS_FILE and checked syntax."
else
    echo "There was a problem with the sudoers file syntax. Please check it manually."
fi

echo "Enter a username: "
read NEW_USER
useradd -m -G wheel,users -s /bin/bash "$NEW_USER"
echo "set your user password"
passwd "$NEW_USER"

read -p "if you want to clean up your disk you could go to root dir and remove your stage3 tarball (press enter to continue)"

echo "unmounting all"
unmount -a

echo "reboot your system and it should load into GRUB. Have fun!"
